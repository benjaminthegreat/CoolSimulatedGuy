;
; File generated by cc65 v 2.16 - Git 9ca004e
;
	.fopt		compiler,"cc65 v 2.16 - Git 9ca004e"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.export		_index
	.export		_NMI_flag
	.export		_Frame_Count
	.export		_textPosition
	.export		_currentStory
	.export		_STORY_BRIEFING_A
	.export		_STORY_BRIEFING_B
	.export		_STORY_BRIEFING_C
	.export		_textLimits
	.export		_PALETTE
	.export		_allOff
	.export		_allOn
	.export		_resetScroll
	.export		_loadPalette
	.export		_clearText
	.export		_loadNextChar
	.export		_main

.segment	"RODATA"

_STORY_BRIEFING_A:
	.byte	$54,$68,$65,$20,$79,$65,$61,$72,$20,$69,$73,$20,$32,$30,$31,$38
	.byte	$2E,$20,$45,$76,$65,$72,$79,$62,$6F,$64,$79,$20,$68,$61,$73,$20
	.byte	$63,$68,$61,$6E,$67,$65,$64,$20,$74,$68,$65,$69,$72,$20,$45,$64
	.byte	$6D,$6F,$64,$6F,$20,$70,$69,$63,$74,$75,$72,$65,$20,$74,$6F,$20
	.byte	$42,$65,$6E,$20,$53,$6D,$69,$74,$68,$2E,$20,$45,$78,$63,$65,$70
	.byte	$74,$20,$6F,$6E,$65,$20,$6D,$61,$6E,$2E,$2E,$2E,$00
_STORY_BRIEFING_B:
	.byte	$50,$61,$75,$6C,$20,$4D,$75,$6C,$76,$61,$6E,$65,$79,$20,$73,$74
	.byte	$69,$63,$6B,$73,$20,$73,$74,$75,$62,$62,$6F,$72,$6E,$6C,$79,$20
	.byte	$77,$69,$74,$68,$20,$68,$69,$73,$20,$64,$69,$73,$67,$75,$73,$74
	.byte	$69,$6E,$67,$20,$69,$6D,$61,$67,$65,$20,$6F,$66,$20,$61,$20,$6D
	.byte	$61,$6E,$20,$77,$68,$6F,$20,$6C,$6F,$6F,$6B,$73,$20,$73,$6F,$6D
	.byte	$65,$77,$68,$61,$74,$2C,$20,$62,$75,$74,$20,$6E,$6F,$74,$20,$65
	.byte	$78,$61,$63,$74,$6C,$79,$20,$6C,$69,$6B,$65,$20,$68,$69,$6D,$73
	.byte	$65,$6C,$66,$00
_STORY_BRIEFING_C:
	.byte	$55,$6E,$62,$65,$6B,$6E,$6F,$77,$6E,$73,$74,$20,$74,$6F,$20,$4D
	.byte	$75,$6C,$76,$61,$6E,$65,$79,$2C,$20,$61,$20,$72,$65,$73,$69,$73
	.byte	$74,$61,$6E,$63,$65,$20,$66,$6F,$72,$63,$65,$20,$67,$61,$74,$68
	.byte	$65,$72,$73,$20,$69,$6E,$20,$74,$68,$65,$20,$73,$68,$61,$64,$6F
	.byte	$77,$73,$20,$6F,$66,$20,$68,$69,$73,$20,$63,$6F,$6D,$70,$75,$74
	.byte	$65,$72,$20,$6C,$61,$62,$00
_textLimits:
	.byte	$5C
	.byte	$73
	.byte	$56
_PALETTE:
	.byte	$1F
	.byte	$00
	.byte	$10
	.byte	$20

.segment	"BSS"

_index:
	.res	1,$00
_NMI_flag:
	.res	1,$00
_Frame_Count:
	.res	1,$00
_textPosition:
	.res	1,$00
_currentStory:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ allOff (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_allOff: near

.segment	"CODE"

;
; PPU_CTRL = 0;
;
	lda     #$00
	sta     $2000
;
; PPU_MASK = 0;
;
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ allOn (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_allOn: near

.segment	"CODE"

;
; PPU_CTRL = 0x90;
;
	lda     #$90
	sta     $2000
;
; PPU_MASK = 0x1e;
;
	lda     #$1E
	sta     $2001
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ resetScroll (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_resetScroll: near

.segment	"CODE"

;
; PPU_ADDRESS = 0;
;
	lda     #$00
	sta     $2006
;
; PPU_ADDRESS = 0;
;
	sta     $2006
;
; SCROLL = 0;
;
	sta     $2005
;
; SCROLL = 0;
;
	sta     $2005
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadPalette (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadPalette: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x3f;
;
	lda     #$3F
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	sta     _index
L00A2:	lda     _index
	cmp     #$04
	bcs     L0095
;
; PPU_DATA = PALETTE[index];
;
	ldy     _index
	lda     _PALETTE,y
	sta     $2007
;
; for( index = 0; index < sizeof(PALETTE); ++index ){
;
	inc     _index
	jmp     L00A2
;
; }
;
L0095:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ clearText (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearText: near

.segment	"CODE"

;
; allOff();
;
	jsr     _allOff
;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x00;
;
	lda     #$00
	sta     $2006
;
; for(index = 0; index < textLimits[currentStory - 1]; ++index) {
;
	sta     _index
L00A3:	lda     _index
	jsr     pusha0
	lda     _currentStory
	sec
	sbc     #$01
	bcs     L0063
	ldx     #$FF
L0063:	sta     ptr1
	txa
	clc
	adc     #>(_textLimits)
	sta     ptr1+1
	ldy     #<(_textLimits)
	lda     (ptr1),y
	jsr     tosicmp0
	bcs     L005C
;
; PPU_DATA = 0;
;
	lda     #$00
	sta     $2007
;
; for(index = 0; index < textLimits[currentStory - 1]; ++index) {
;
	inc     _index
	jmp     L00A3
;
; }
;
L005C:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ loadNextChar (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadNextChar: near

.segment	"CODE"

;
; PPU_ADDRESS = 0x21;
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x00 + textPosition;
;
	lda     _textPosition
	sta     $2006
;
; if(textPosition > textLimits[currentStory]) PPU_DATA = 0;
;
	lda     _textPosition
	jsr     pusha0
	ldy     _currentStory
	lda     _textLimits,y
	jsr     tosicmp0
	bcc     L006F
	beq     L006F
	lda     #$00
;
; else {
;
	jmp     L00A4
;
; if(currentStory == 0) PPU_DATA = STORY_BRIEFING_A[textPosition];
;
L006F:	lda     _currentStory
	bne     L00A5
	ldy     _textPosition
	lda     _STORY_BRIEFING_A,y
	sta     $2007
;
; if(currentStory == 1) PPU_DATA = STORY_BRIEFING_B[textPosition];
;
L00A5:	lda     _currentStory
	cmp     #$01
	bne     L00A6
	ldy     _textPosition
	lda     _STORY_BRIEFING_B,y
	sta     $2007
;
; if(currentStory == 2) PPU_DATA = STORY_BRIEFING_C[textPosition];
;
L00A6:	lda     _currentStory
	cmp     #$02
	bne     L00A7
	ldy     _textPosition
	lda     _STORY_BRIEFING_C,y
L00A4:	sta     $2007
;
; ++textPosition;
;
L00A7:	inc     _textPosition
;
; } 
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; allOff(); //screen off
;
	jsr     _allOff
;
; loadPalette(); //load the palette
;
	jsr     _loadPalette
;
; resetScroll(); //reset the scroll
;
	jsr     _resetScroll
;
; currentStory = 0;
;
	lda     #$00
	sta     _currentStory
;
; textPosition = 0;
;
	sta     _textPosition
;
; PPU_ADDRESS = 0x21; //now you have an address in your PP unit
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0x00; //tbh my iq isn't high enough to know why these do anything
;
	lda     #$00
	sta     $2006
;
; allOn();
;
L00AB:	jsr     _allOn
;
; while(NMI_flag == 0);
;
L00A8:	lda     _NMI_flag
	beq     L00A8
;
; NMI_flag = 0;
;
	lda     #$00
	sta     _NMI_flag
;
; loadNextChar();
;
	jsr     _loadNextChar
;
; resetScroll();
;
	jsr     _resetScroll
;
; if(Frame_Count == 200 && currentStory != 2) {
;
	lda     _Frame_Count
	cmp     #$C8
	bne     L00A8
	lda     _currentStory
	cmp     #$02
	beq     L00A8
;
; ++currentStory;
;
	inc     _currentStory
;
; clearText();
;
	jsr     _clearText
;
; PPU_ADDRESS = 0x21; //now you have an address in your PP unit
;
	lda     #$21
	sta     $2006
;
; PPU_ADDRESS = 0xc0; //tbh my iq isn't high enough to know why these do anything
;
	lda     #$C0
	sta     $2006
;
; textPosition = 0;
;
	lda     #$00
	sta     _textPosition
;
; while(1) {
;
	jmp     L00AB

.endproc

